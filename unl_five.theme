<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\group\Entity\GroupContent;
use Drupal\group\Entity\GroupRelationship;
use Drupal\block\Entity\Block;
use Drupal\node\Entity\Node;

/**
 * Returns the WDN version.
 *
 * @return string
 *   The WDN version.
 */
function unl_five_get_wdn_version() {
  $unl_five_path = \Drupal::service('extension.list.theme')->getPath('unl_five');

  return file_get_contents($unl_five_path . '/WDN_VERSION');
}

/**
 * Implements hook_preprocess().
 */
function unl_five_preprocess(&$vars) {
  // Populate global WDN object with version and directory path.
  // The WDN object will available to all Twig templates.
  $wdn_version_string = unl_five_get_wdn_version();
  $vars['wdn'] = [
    'version' => $wdn_version_string,
    'directory' => "/wdn/templates_$wdn_version_string",
  ];
}

/**
 * Implements template_preprocess_html().
 */
function unl_five_preprocess_html(&$variables)
{


  // Set the <title> tag to UNL format: Page Title | Site Name | University of Nebraska–Lincoln
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('metatag')) {
    // Remove Page Title on the front page.
    if (\Drupal::service('path.matcher')->isFrontPage()) {
      unset($variables['head_title']['title']);
    }
    // Append University of Nebraska–Lincoln to the end.
    $site_config = \Drupal::config('system.site');
    if ($site_config->get('name') != 'University of Nebraska–Lincoln') {
      $variables['head_title'] = array_merge($variables['head_title'], array('UNL' => 'University of Nebraska–Lincoln'));
    }
    $variables['head_title'] = implode(' | ', $variables['head_title']);
  }

  // If <link rel="home"> has already been set elsewhere (in a Context for example) then return...
  foreach ($variables['page']['#attached']['html_head'] as $key => $element) {
    if ($element[0]["#tag"] == 'link' && isset($element[0]['#attributes']['rel']) && $element[0]['#attributes']['rel'] == 'home') {
      return;
    }
  }

  // ...otherwise add a <link rel="home"> tag with the front page as the href attribute
  $element = array(
    '#tag' => 'link',
    '#attributes' => array(
      'rel' => 'home',
      'href' => \Drupal\Core\Url::fromRoute('<front>', array(), array('absolute' => TRUE))
        ->toString(),
    ),
    '#type' => 'html_tag'
  );
  $variables['page']['#attached']['html_head'][] = array(
    $element,
    'link-rel-home'
  );

  // Add node id to the body class.
  if ($nid = \Drupal::routeMatch()->getRawParameter('node')) {
    $variables['attributes']['class'][] = 'page-node-' . $nid;
  }
}

/**
 * Implements template_preprocess_page().
 */
function unl_five_preprocess_page(&$variables) {

  // Work around for Drupal core issue.
  // Create a boolean variable for each region in the format has_sidebar_second
  // Blocks employ lazy building.  This makes it difficult to determine from
  // **Twig templates** if they will eventually produce empty content or not.
  // Also, it appears the Twig method of {{ page.sidebar_second|render|striptags|trim }}
  //   doesn't always work.
  // @see https://github.com/localgovdrupal/localgov_base/blob/654e9c51d3baa45a937eba4e3ee54a17f460d070/localgov_base.theme#L40
  // @see https://www.drupal.org/node/953034
  // @see https://www.drupal.org/forum/support/module-development-and-code-questions/2016-04-07/drupal-8-regions-with-and-empty#comment-12149518
  $active_theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
  $system_region = system_region_list($active_theme, $show = REGIONS_ALL);

  foreach ($system_region as $key => $value) {
    $region = $key;
    $has = 'has_' . $region;

    $excluded_regions = [
      'messages',
    ];

    if (!in_array($region, $excluded_regions)) {
      $copy = $variables['page'][$region];
      $rendered = Drupal::service('renderer')->renderPlain($copy);
    }
    else {
      $rendered = Drupal::service('renderer')->renderPlain($variables['page'][$region]);
    }
    $variables[$has] = !empty(trim(strip_tags($rendered, '<drupal-render-placeholder><embed><hr><iframe><img><input><link><object><script><source><style><video>')));
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function unl_five_page_attachments_alter(&$attachments) {
  $metaToRemove = [
    'system_meta_content_type',
    'viewport',
  ];
  foreach ($attachments['#attached']['html_head'] as $key => $element) {
    if (in_array($element[1], $metaToRemove)) {
      unset($attachments['#attached']['html_head'][$key]);
    }
  }
}

/**
 * Implements template_preprocess_region().
 */
function unl_five_preprocess_region(&$variables) {
  //add the three navigation block views to region--navlinks.html.twig theme
   if ($variables['region'] == 'navlinks' && \Drupal::service('module_handler')->moduleExists('group_content_menu')) {
    $node = \Drupal::request()->attributes->get('node');
    
    if ($node) {
      $group_relationships = GroupRelationship::loadByEntity($node);

      //check if node is a part of a group
      if ($group_relationships) {
        $elements = $variables['elements'];
        $group_blocks = [];
        foreach ($elements as $key => $value) {
          if (strpos($key, '#') !== 0) {
            if ($elements[$key]['#base_plugin_id'] == 'group_content_menu') {
              $block_id = $elements[$key]['#id'];
              $group_block = Block::load($block_id);
              //add all group menu views to be displayed in group_blocks
              $group_blocks[] = \Drupal::entityTypeManager()
                ->getViewBuilder('block')
                ->view($group_block);
            }
          }
        }

        $variables['group_blocks'] = $group_blocks;
      }
        //Add unl_five_herbie_local_tasks menu block view to theme
        $unl_five_herbie_local_tasks = Block::load('unl_five_herbie_local_tasks');
        $variables['unl_five_herbie_local_tasks'] = \Drupal::entityTypeManager()
          ->getViewBuilder('block')
          ->view($unl_five_herbie_local_tasks);

        //Add unl_five_herbie_mainnavigation menu block view to theme
        $unl_five_herbie_mainnavigation = Block::load('unl_five_herbie_mainnavigation');
        $variables['unl_five_herbie_mainnavigation'] = \Drupal::entityTypeManager()
          ->getViewBuilder('block')
          ->view($unl_five_herbie_mainnavigation);

    } else {
      $unl_five_herbie_local_tasks = Block::load('unl_five_herbie_local_tasks');
        $variables['unl_five_herbie_local_tasks'] = \Drupal::entityTypeManager()
          ->getViewBuilder('block')
          ->view($unl_five_herbie_local_tasks);
    }
  }
}

/**
 * Implements template_preprocess_block().
 */
function unl_five_preprocess_block(&$variables) {
  // Add Menu Block class to book navigation block so that they can share CSS.
  if ($variables['plugin_id'] == 'book_navigation') {
    $variables['attributes']['class'][] = 'block-menu-block';
  }
  // Add .wdn-sans-serif to menu blocks.
  if ($variables['plugin_id'] == 'book_navigation' || substr($variables['plugin_id'], 0, 16) == 'block-menu-block' ) {
    $variables['attributes']['classes'][] = 'wdn-sans-serif';
    $variables['title_attributes']['class'][] = 'wdn-sans-serif';
  }

  // Change Site Title to the Group title
  if ($variables['base_plugin_id'] == 'system_branding_block') {
    $group = unl_five_get_current_group();
    if ($group) {
      $variables['site_name'] = $group->label();
      if ($site_affiliation = $group->get('field_site_affiliation')) {
        $variables['site_slogan'] = $site_affiliation->value;
      }
    }
  }

  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('group_subdomain')) {
    $variables['#cache']['contexts'][] = 'url';
  }
  else {
    $variables['#cache']['contexts'][] = 'url.path';
  }

  // Add a class to the existing breadcrumbs block wrapper, rather than add another wrapper in the template.
  if ($variables['plugin_id'] == 'system_breadcrumb_block') {
    $variables['attributes']['class'][] = 'dcf-breadcrumbs-wrapper';
  }

  // Change Site Title to the Group title
  if($variables['base_plugin_id']) {
    if ($variables['base_plugin_id'] == 'system_branding_block') {
      if (\Drupal::service('module_handler')->moduleExists('group')) {
        $node = \Drupal::request()->attributes->get('node');
        $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  
        if ($node) {
          $group_relationships = GroupRelationship::loadByEntity($node);
          //check if node is a part of a group
          if ($group_relationships) {
            foreach ($group_relationships as $group_content) {
              $group =  $group_content->getGroup();
            }
            $label =  $group->get('label')->getValue()[0]['value'];
            $variables['group_label'] = $label;
          }
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_field().
 */
function unl_five_preprocess_field(&$variables) {
  // Search the text of text field types for usage of the 'unl-font-serif'.
  // Load the 'unl_five_herbie/font-serif' library if found.
  if (in_array($variables['field_type'], [
    'text',
    'text_long',
    'text_with_summary',
  ])) {
    foreach ($variables['items'] as $item) {
      if (strstr($item['content']['#text'], 'unl-font-serif')) {
        $variables['#attached']['library'][] = 'unl_five/wdn-font-serif';
        break;
      }
    }
  }
}

/**
 * Implements template_preprocess_book_navigation().
 */
function unl_five_preprocess_book_navigation(&$variables) {
  // This theme's 'book-tree' template is for the book nav in the sidebar. That block does not make use
  // of this preprocess function nor the 'book-navigation' template. It just uses 'book-tree'.
  // The book navigation at the bottom of the page also calls 'book-tree' so an alternative 'book-tree' template
  // is needed. However, its only template suggestion appends the book ID to the end. It is simplified here:
  if (is_array($variables['tree'])) {
    $variables['tree']['#theme'] = 'book_tree__book_toc';
  }
}

/**
 * Implements template_preprocess_webform_composite_address().
 */
function unl_five_preprocess_webform_composite_address(&$variables) {
  $containerKey = array_search('container', $variables['element']['#theme_wrappers']);

  if (in_array('fieldset', $variables['element']['#theme_wrappers']) && $containerKey !== false) {
    unset($variables['element']['#theme_wrappers'][$containerKey]);
  }
}

/**
 * Implements hook_form_alter().
 *
 * All forms that are rendered by unl_five will be compatiable with DCF.
 */
function unl_five_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Add 'dcf-form' class to form.
  $form['#attributes']['class'][] = 'dcf-form';

  // If a Webform form, add a class indicating the major version of the
  // Webform module.
  if (isset($form['#webform_id'])) {
    /** @var \Drupal\Core\Extension\ModuleExtensionList */
    $extension_list = Drupal::service('extension.list.module');
    if ($extension_list->exists('webform')) {
      $extension_info = $extension_list->getExtensionInfo('webform');
      if (strncasecmp($extension_info['version'], "8.x-5", 5) === 0) {
        $form['#attributes']['class'][] = 'webform-version-5';
      }
      elseif (strncasecmp($extension_info['version'], "6.", 2) === 0) {
        $form['#attributes']['class'][] = 'webform-version-6';
      }
    }
  }

  // Target Layout Builder forms.
  // e.g. form_id ends in '_layout_builder_form'.
  if (strpos(strrev($form_id), strrev('_layout_builder_form')) === 0) {
    // Add DCF button classes.
    $form['actions']['submit']['#attributes']['class'][] = 'dcf-btn';
    $form['actions']['submit']['#attributes']['class'][] = 'dcf-btn-primary';
    $form['actions']['submit']['#attributes']['class'][] = 'dcf-mb-2';
    $form['actions']['discard_changes']['#attributes']['class'][] = 'dcf-btn';
    $form['actions']['discard_changes']['#attributes']['class'][] = 'dcf-btn-secondary';
    $form['actions']['discard_changes']['#attributes']['class'][] = 'dcf-mb-2';
    $form['actions']['revert']['#attributes']['class'][] = 'dcf-btn';
    $form['actions']['revert']['#attributes']['class'][] = 'dcf-btn-secondary';
    $form['actions']['revert']['#attributes']['class'][] = 'dcf-mb-2';
    $form['actions']['move_sections']['#attributes']['class'][] = 'dcf-btn';
    $form['actions']['move_sections']['#attributes']['class'][] = 'dcf-btn-secondary';
    $form['actions']['move_sections']['#attributes']['class'][] = 'dcf-mb-2';
    // Add margin-top to preview toggle.
    $form['actions']['preview_toggle']['#attributes']['class'][] = 'dcf-mt-2';
  }
  elseif ($form_id == 'layout_builder_discard_changes') {
    // Add DCF button classes.
    $form['actions']['submit']['#attributes']['class'][] = 'dcf-btn';
    $form['actions']['submit']['#attributes']['class'][] = 'dcf-btn-secondary';
  }
}

/**
 * Implements hook_preprocess_form_element().
 *
 * All elements that are rendered by unl_five will be compatiable with DCF.
 */
function unl_five_preprocess_form_element(&$variables) {
  // Add 'dcf-required' class to required elements.
  if (isset($variables['element']['#required'])
    && $variables['element']['#required'] == TRUE
  ) {

    $variables['label']['#title'] = $variables['label']['#title'] . ' <small class="dcf-required">Required</small>';
  }

  // Add 'dcf-form-controls-inline' class as appropriate.
  if (isset($variables['attributes']['class'])) {
    if (is_array($variables['attributes']['class'])
      && in_array('webform-element--title-inline', $variables['attributes']['class'])
    ) {

      $variables['attributes']['class'][] = 'dcf-form-controls-inline';
    }
    // $variables['attributes']['class'] could also be a string.
    else {
      // Convert string value into an array value; preserve existing class.
      $variables['attributes']['class'] = [
        $variables['attributes']['class'],
        'dcf-form-controls-inline',
      ];
    }
  }

  // Add 'dcf-form-help' class to descriptions.
  // Elements of type 'details' are exempt.
  if ($variables['element']['#type'] != 'details' && isset($variables['description']['content'])) {
    $variables['description']['attributes']->addClass('dcf-form-help');
  }

  // Add 'dcf-form-group' class to all elements, except those rendered
  // with certain parents. In these cases, the class has already been
  // added to the parent element.
  $exempt_parents = [
    'checkboxes',
    'webform_checkboxes_other',
    'radios',
  ];
  $parents = $variables['element']['#parents'] ?? [];
  if (empty(array_intersect($exempt_parents, $parents))) {
    $variables['attributes']['class'][] = 'dcf-form-group';
  }

  // Add 'dcf-input-checkbox' class to checkboxes.
  if ($variables['type'] == 'checkbox') {
    // Add 'dcf-input-checkbox' class to checkboxes.
    $variables['attributes']['class'][] = 'dcf-input-checkbox';
  }

  // Add 'dcf-input-radio' class to radios except those rendered
  // with certain parents. In these cases, the radios are
  // displayed as buttons, so the DCF radio styles are not appropriate.
  $button_parents = [
    'buttons',
    'buttons_other',
  ];
  $parents = $variables['element']['#parents'] ?? [];
  if ($variables['type'] == 'radio') {
    if (empty(array_intersect($button_parents, $parents))) {
      $variables['attributes']['class'][] = 'dcf-input-radio';
    }
    else {
      $variables['label']['#attributes']['class'][] = 'dcf-btn';
    }
  }
}

/**
 * Implements template_preprocess_details().
 *
 * All details elements that are rendered by unl_five will be compatiable with DCF.
 */
function unl_five_preprocess_details(&$variables) {
  // Add 'dcf-form-group' class to details element.
  $variables['attributes']['class'][] = 'dcf-form-group';
}

/**
 * Implements template_preprocess_fieldset().
 *
 * All fieldsets that are rendered by unl_five will be compatiable with DCF.
 */
function unl_five_preprocess_fieldset(&$variables) {
  // Fieldset elements.
  if (is_array($variables['prefix'])) {
    if (isset($variables['prefix']['description']['description']['#attributes'])) {
      $variables['prefix']['description']['description']['#attributes']->addClass('dcf-form-help');
    }
  }
  // Checkboxes and other composite elements.
  elseif(is_object($variables['prefix'])) {
    $markup = $variables['prefix']->__toString();
    // There's no good way to do this.
    $variables['prefix'] = Markup::create('<div class="dcf-form-help">' . $markup . '</div>');
  }
}

/**
 * Implements template_element_info_alter().
 */
function unl_five_element_info_alter(&$vars) {
  // Add custom process function for WebformMultiple elements.
  $vars['webform_multiple']['#process'][] = [
    'Drupal\unl_five\Element\WebformMultiple',
    'processWebformMultiple'
  ];
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function unl_five_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  // Support appending ?format=partial to a URL to return the
  // main content without the UNL template wrapper.
  $format = \Drupal::request()->query->get('format');
  if ($format == 'partial' && in_array($hook, ['html', 'page'])) {
    $suggestions[] = $hook . '__' . 'partial';
  }
}
